#################################################################################
#										#
#		Linux TPM2 Makefile Sample for Fedora Installed rpms		#
#			     Written by Ken Goldman				#
#		       IBM Thomas J. Watson Research Center			#
#	      $Id: makefile.sample 1258 2018-06-28 16:46:10Z kgoldman $		#
#										#
# (c) Copyright IBM Corporation 2014, 2018					#
# 										#
# All rights reserved.								#
# 										#
# Redistribution and use in source and binary forms, with or without		#
# modification, are permitted provided that the following conditions are	#
# met:										#
# 										#
# Redistributions of source code must retain the above copyright notice,	#
# this list of conditions and the following disclaimer.				#
# 										#
# Redistributions in binary form must reproduce the above copyright		#
# notice, this list of conditions and the following disclaimer in the		#
# documentation and/or other materials provided with the distribution.		#
# 										#
# Neither the names of the IBM Corporation nor the names of its			#
# contributors may be used to endorse or promote products derived from		#
# this software without specific prior written permission.			#
# 										#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		#
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		#
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		#
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT		#
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,	#
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT		#
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,		#
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY		#
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT		#
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE		#
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		#
#										#
#################################################################################

# This is a sample application makefile using the /usr/include and /usr/lib64
# directory paths from the Fedora rpm install.

CC = /usr/bin/gcc

CCFLAGS = 	-DTPM_POSIX \
		-Wall  -W -Wmissing-declarations -Wmissing-prototypes -Wnested-externs \
		-ggdb -O0 -c 			\
		-DTPM_TPM20			\
		-I/usr/include/ibmtss

# for shared library

LNFLAGS = 	-DTPM_POSIX		\
		-ggdb 			\
		-libmtss -libmtssutils -lcrypto

# default build target

ALL = 	activatecredential			\
	eventextend				\
	imaextend				\
	certify					\
	certifycreation				\
	changeeps				\
	changepps				\
	clear					\
	clearcontrol				\
	clockrateadjust				\
	clockset				\
	contextload				\
	contextsave				\
	create					\
	createloaded				\
	createprimary				\
	dictionaryattacklockreset	 	\
	dictionaryattackparameters	 	\
	duplicate				\
	eccparameters				\
	ecephemeral				\
	encryptdecrypt				\
	evictcontrol				\
	eventsequencecomplete			\
	flushcontext				\
	getcommandauditdigest			\
	getcapability				\
	getrandom				\
	gettestresult				\
	getsessionauditdigest			\
	gettime					\
	hash					\
	hashsequencestart	 		\
	hierarchycontrol	 		\
	hierarchychangeauth	 		\
	hmac					\
	hmacstart				\
	import					\
	load					\
	loadexternal				\
	makecredential				\
	nvcertify				\
	nvchangeauth				\
	nvdefinespace				\
	nvextend	 			\
	nvglobalwritelock			\
	nvincrement	 			\
	nvread					\
	nvreadlock				\
	nvreadpublic				\
	nvsetbits				\
	nvundefinespace				\
	nvundefinespacespecial			\
	nvwrite					\
	nvwritelock				\
	objectchangeauth	 		\
	pcrallocate				\
	pcrevent				\
	pcrextend				\
	pcrread					\
	pcrreset				\
	policyauthorize				\
	policyauthvalue				\
	policycommandcode	 		\
	policycphash		 		\
	policynamehash		 		\
	policycountertimer			\
	policyduplicationselect			\
	policygetdigest				\
	policymaker				\
	policymakerpcr				\
	policynv				\
	policyauthorizenv			\
	policynvwritten				\
	policypassword				\
	policypcr				\
	policyor				\
	policyrestart				\
	policysigned				\
	policysecret				\
	policytemplate		 		\
	policyticket				\
	powerup					\
	quote					\
	readclock				\
	readpublic				\
	returncode				\
	rewrap					\
	rsadecrypt				\
	rsaencrypt				\
	sequencecomplete			\
	sequenceupdate				\
	setprimarypolicy	 		\
	shutdown	 			\
	sign					\
	startauthsession			\
	startup	 				\
	stirrandom				\
	unseal					\
	verifysignature				\
	zgen2phase 				\
						\
	signapp					\
	writeapp				\
	createek				\
	createekcert				\
	tpm2pem					\
	tpmpublic2eccpoint

all:	$(ALL)

.PHONY:		clean
.PRECIOUS:	%.o

clean:		
		rm -f *.o \
		$(ALL)

# applications

activatecredential:	ibmtss/tss.h activatecredential.o
			$(CC) $(LNFLAGS) activatecredential.o -o activatecredential
eventextend:		eventextend.o eventlib.o
			$(CC) $(LNFLAGS) eventextend.o eventlib.o -o eventextend
imaextend:		imaextend.o imalib.o
			$(CC) $(LNFLAGS) imaextend.o imalib.o -o imaextend
certify:		ibmtss/tss.h certify.o
			$(CC) $(LNFLAGS) certify.o -o certify
certifycreation:	ibmtss/tss.h certifycreation.o
			$(CC) $(LNFLAGS) certifycreation.o -o certifycreation
changeeps:		ibmtss/tss.h changeeps.o
			$(CC) $(LNFLAGS) changeeps.o -o changeeps
changepps:		ibmtss/tss.h changepps.o
			$(CC) $(LNFLAGS) changepps.o -o changepps
clear:			ibmtss/tss.h clear.o
			$(CC) $(LNFLAGS) clear.o -o clear
clearcontrol:		ibmtss/tss.h clearcontrol.o
			$(CC) $(LNFLAGS) clearcontrol.o -o clearcontrol
clockrateadjust:	ibmtss/tss.h clockrateadjust.o
			$(CC) $(LNFLAGS) clockrateadjust.o -o clockrateadjust
clockset:		ibmtss/tss.h clockset.o
			$(CC) $(LNFLAGS) clockset.o -o clockset
commit:			ibmtss/tss.h commit.o
			$(CC) $(LNFLAGS) commit.o -o commit
contextload:		ibmtss/tss.h contextload.o
			$(CC) $(LNFLAGS) contextload.o -o contextload
contextsave:		ibmtss/tss.h contextsave.o
			$(CC) $(LNFLAGS) contextsave.o -o contextsave
create:			ibmtss/tss.h create.o 
			$(CC) $(LNFLAGS) create.o -o create
createloaded:		ibmtss/tss.h createloaded.o 
			$(CC) $(LNFLAGS) createloaded.o -o createloaded
createprimary:		ibmtss/tss.h createprimary.o 
			$(CC) $(LNFLAGS) createprimary.o -o createprimary
dictionaryattacklockreset:		ibmtss/tss.h dictionaryattacklockreset.o
			$(CC) $(LNFLAGS) dictionaryattacklibmtss/tss.h ockreset.o -o dictionaryattacklockreset
dictionaryattackparameters:		ibmtss/tss.h dictionaryattackparameters.o
			$(CC) $(LNFLAGS) dictionaryattackparameters.o -o dictionaryattackparameters
duplicate:		ibmtss/tss.h duplicate.o
			$(CC) $(LNFLAGS) duplicate.o -o duplicate 
eccparameters:		ibmtss/tss.h eccparameters.o
			$(CC) $(LNFLAGS) eccparameters.o -o eccparameters 
ecephemeral:		ibmtss/tss.h ecephemeral.o
			$(CC) $(LNFLAGS) ecephemeral.o -o ecephemeral 
encryptdecrypt:		ibmtss/tss.h encryptdecrypt.o
			$(CC) $(LNFLAGS) encryptdecrypt.o -o encryptdecrypt	
eventsequencecomplete:	ibmtss/tss.h eventsequencecomplete.o
			$(CC) $(LNFLAGS) eventsequencecomplete.o -o eventsequencecomplete	
evictcontrol:		ibmtss/tss.h evictcontrol.o
			$(CC) $(LNFLAGS) evictcontrol.o -o evictcontrol	
flushcontext:		ibmtss/tss.h flushcontext.o
			$(CC) $(LNFLAGS) flushcontext.o -o flushcontext
getcommandauditdigest:	ibmtss/tss.h getcommandauditdigest.o
			$(CC) $(LNFLAGS) getcommandauditdigest.o -o getcommandauditdigest
getcapability:		ibmtss/tss.h getcapability.o
			$(CC) $(LNFLAGS) getcapability.o -o getcapability
getrandom:		ibmtss/tss.h getrandom.o
			$(CC) $(LNFLAGS) getrandom.o -o getrandom
gettestresult:		ibmtss/tss.h gettestresult.o
			$(CC) $(LNFLAGS) gettestresult.o -o gettestresult
getsessionauditdigest:	ibmtss/tss.h getsessionauditdigest.o
			$(CC) $(LNFLAGS) getsessionauditdigest.o -o getsessionauditdigest
gettime:		ibmtss/tss.h gettime.o
			$(CC) $(LNFLAGS) gettime.o -o gettime
hashsequencestart:	ibmtss/tss.h hashsequencestart.o
			$(CC) $(LNFLAGS) hashsequencestart.o -o hashsequencestart
hash:			ibmtss/tss.h hash.o
			$(CC) $(LNFLAGS) hash.o -o hash
hierarchycontrol:	ibmtss/tss.h hierarchycontrol.o
			$(CC) $(LNFLAGS) hierarchycontrol.o -o hierarchycontrol
hierarchychangeauth:	ibmtss/tss.h hierarchychangeauth.o
			$(CC) $(LNFLAGS) hierarchychangeauth.o -o hierarchychangeauth
hmac:			ibmtss/tss.h hmac.o
			$(CC) $(LNFLAGS) hmac.o -o hmac
hmacstart:		ibmtss/tss.h hmacstart.o
			$(CC) $(LNFLAGS) hmacstart.o -o hmacstart
import:			ibmtss/tss.h import.o
			$(CC) $(LNFLAGS) import.o -o import
load:			ibmtss/tss.h load.o
			$(CC) $(LNFLAGS) load.o -o load
loadexternal:		ibmtss/tss.h loadexternal.o
			$(CC) $(LNFLAGS) loadexternal.o -o loadexternal
makecredential:		ibmtss/tss.h makecredential.o
			$(CC) $(LNFLAGS) makecredential.o -o makecredential
nvcertify:		ibmtss/tss.h nvcertify.o
			$(CC) $(LNFLAGS) nvcertify.o -o nvcertify
nvchangeauth:		ibmtss/tss.h nvchangeauth.o
			$(CC) $(LNFLAGS) nvchangeauth.o -o nvchangeauth
nvdefinespace:		ibmtss/tss.h nvdefinespace.o
			$(CC) $(LNFLAGS) nvdefinespace.o -o nvdefinespace
nvextend:		ibmtss/tss.h nvextend.o
			$(CC) $(LNFLAGS) nvextend.o -o nvextend
nvglobalwritelock:	ibmtss/tss.h nvglobalwritelock.o
			$(CC) $(LNFLAGS) nvglobalwritelock.o -o nvglobalwritelock
nvincrement:		ibmtss/tss.h nvincrement.o
			$(CC) $(LNFLAGS) nvincrement.o -o nvincrement
nvread:			ibmtss/tss.h nvread.o 
			$(CC) $(LNFLAGS) nvread.o -o nvread
nvreadlock:		ibmtss/tss.h nvreadlock.o
			$(CC) $(LNFLAGS) nvreadlock.o -o nvreadlock
nvreadpublic:		ibmtss/tss.h nvreadpublic.o
			$(CC) $(LNFLAGS) nvreadpublic.o -o nvreadpublic
nvsetbits:		ibmtss/tss.h nvsetbits.o
			$(CC) $(LNFLAGS) nvsetbits.o -o nvsetbits
nvundefinespace:	ibmtss/tss.h nvundefinespace.o
			$(CC) $(LNFLAGS) nvundefinespace.o -o nvundefinespace
nvundefinespacespecial:	ibmtss/tss.h nvundefinespacespecial.o
			$(CC) $(LNFLAGS) nvundefinespacespecial.o -o nvundefinespacespecial
nvwrite:		ibmtss/tss.h nvwrite.o 
			$(CC) $(LNFLAGS) nvwrite.o -o nvwrite
nvwritelock:		ibmtss/tss.h nvwritelock.o
			$(CC) $(LNFLAGS) nvwritelock.o -o nvwritelock
objectchangeauth:	ibmtss/tss.h objectchangeauth.o
			$(CC) $(LNFLAGS) objectchangeauth.o -o objectchangeauth
pcrallocate: 		ibmtss/tss.h pcrallocate.o
			$(CC) $(LNFLAGS) pcrallocate.o -o pcrallocate
pcrevent: 		ibmtss/tss.h pcrevent.o
			$(CC) $(LNFLAGS) pcrevent.o -o pcrevent
pcrextend: 		ibmtss/tss.h pcrextend.o
			$(CC) $(LNFLAGS) pcrextend.o -o pcrextend
pcrread: 		ibmtss/tss.h pcrread.o
			$(CC) $(LNFLAGS) pcrread.o -o pcrread
pcrreset: 		ibmtss/tss.h pcrreset.o
			$(CC) $(LNFLAGS) pcrreset.o -o pcrreset
policyauthorize:	ibmtss/tss.h policyauthorize.o
			$(CC) $(LNFLAGS) policyauthorize.o -o policyauthorize
policyauthvalue:	ibmtss/tss.h policyauthvalue.o
			$(CC) $(LNFLAGS) policyauthvalue.o -o policyauthvalue
policycommandcode:	ibmtss/tss.h policycommandcode.o
			$(CC) $(LNFLAGS) policycommandcode.o -o policycommandcode
policycphash:		ibmtss/tss.h policycphash.o
			$(CC) $(LNFLAGS) policycphash.o -o policycphash
policynamehash:		ibmtss/tss.h tss2/tss.h policynamehash.o
			$(CC) $(LNFLAGS) policynamehash.o -o policynamehash
policycountertimer :	ibmtss/tss.h policycountertimer.o
			$(CC) $(LNFLAGS) policycountertimer.o -o policycountertimer
policyduplicationselect:	ibmtss/tss.h policyduplicationselect.o $(LIBTSS)
			$(CC) $(LNFLAGS) $(LNAFLAGS) policyduplicationselect.o $(LNALIBS) -o policyduplicationselect
policygetdigest:	ibmtss/tss.h policygetdigest.o
			$(CC) $(LNFLAGS) policygetdigest.o -o policygetdigest
policymaker:		ibmtss/tss.h policymaker.o
			$(CC) $(LNFLAGS) policymaker.o -o policymaker
policymakerpcr:		ibmtss/tss.h policymakerpcr.o
			$(CC) $(LNFLAGS) policymakerpcr.o -o policymakerpcr
policynv:		ibmtss/tss.h policynv.o
			$(CC) $(LNFLAGS) policynv.o -o policynv
policyauthorizenv:	ibmtss/tss.h policyauthorizenv.o
			$(CC) $(LNFLAGS) policyauthorizenv.o -o policyauthorizenv
policynvwritten:	ibmtss/tss.h policynvwritten.o
			$(CC) $(LNFLAGS) policynvwritten.o -o policynvwritten
policyor:		ibmtss/tss.h policyor.o
			$(CC) $(LNFLAGS) policyor.o -o policyor
policypassword:		ibmtss/tss.h policypassword.o
			$(CC) $(LNFLAGS) policypassword.o -o policypassword
policypcr:		ibmtss/tss.h policypcr.o
			$(CC) $(LNFLAGS) policypcr.o -o policypcr
policyrestart:		ibmtss/tss.h policyrestart.o
			$(CC) $(LNFLAGS) policyrestart.o -o policyrestart
policysigned:		ibmtss/tss.h policysigned.o
			$(CC) $(LNFLAGS) policysigned.o -o policysigned
policysecret:		ibmtss/tss.h policysecret.o
			$(CC) $(LNFLAGS) policysecret.o -o policysecret
policytemplate:		ibmtss/tss.h policytemplate.o
			$(CC) $(LNFLAGS) policytemplate.o -o policytemplate
policyticket:		ibmtss/tss.h policyticket.o
			$(CC) $(LNFLAGS) policyticket.o -o policyticket
quote:			ibmtss/tss.h quote.o
			$(CC) $(LNFLAGS) quote.o -o quote
powerup:		ibmtss/tss.h powerup.o
			$(CC) $(LNFLAGS) powerup.o -o powerup
readclock:		ibmtss/tss.h readclock.o
			$(CC) $(LNFLAGS) readclock.o -o readclock
readpublic:		ibmtss/tss.h readpublic.o 
			$(CC) $(LNFLAGS) readpublic.o -o readpublic
returncode:		ibmtss/tss.h returncode.o
			$(CC) $(LNFLAGS) returncode.o -o returncode
rewrap:			ibmtss/tss.h rewrap.o
			$(CC) $(LNFLAGS) rewrap.o -o rewrap
rsadecrypt: 		ibmtss/tss.h rsadecrypt.o
			$(CC) $(LNFLAGS) rsadecrypt.o -o rsadecrypt
rsaencrypt: 		ibmtss/tss.h rsaencrypt.o
			$(CC) $(LNFLAGS) rsaencrypt.o -o rsaencrypt
sequenceupdate:		ibmtss/tss.h sequenceupdate.o
			$(CC) $(LNFLAGS) sequenceupdate.o -o sequenceupdate
sequencecomplete:	ibmtss/tss.h sequencecomplete.o
			$(CC) $(LNFLAGS) sequencecomplete.o -o sequencecomplete
setprimarypolicy:	ibmtss/tss.h setprimarypolicy.o
			$(CC) $(LNFLAGS) setprimarypolicy.o -o setprimarypolicy
shutdown:		ibmtss/tss.h shutdown.o
			$(CC) $(LNFLAGS) shutdown.o -o shutdown
sign:			ibmtss/tss.h sign.o cryptoutils.o
			$(CC) $(LNFLAGS) sign.o -o sign
startauthsession:	ibmtss/tss.h startauthsession.o
			$(CC) $(LNFLAGS) startauthsession.o -o startauthsession
startup:		ibmtss/tss.h startup.o
			$(CC) $(LNFLAGS) startup.o -o startup
stirrandom:		ibmtss/tss.h stirrandom.o
			$(CC) $(LNFLAGS) stirrandom.o -o stirrandom
unseal:			ibmtss/tss.h unseal.o
			$(CC) $(LNFLAGS) unseal.o -o unseal
verifysignature:	ibmtss/tss.h verifysignature.o 
			$(CC) $(LNFLAGS) verifysignature.o -o verifysignature
signapp:		ibmtss/tss.h signapp.o
			$(CC) $(LNFLAGS) signapp.o -o signapp
writeapp:		ibmtss/tss.h writeapp.o
			$(CC) $(LNFLAGS) writeapp.o -o writeapp
createek:		ibmtss/tss.h createek.o ekutils.o
			$(CC) $(LNFLAGS) createek.o -o createek		
tpm2pem:		ibmtss/tss.h tpm2pem.o cryptoutils.o
			$(CC) $(LNFLAGS) tpm2pem.o -o tpm2pem		
tpmpublic2eccpoint:	ibmtss/tss.h tpmpublic2eccpoint.o
			$(CC) $(LNFLAGS) tpmpublic2eccpoint.o -o tpmpublic2eccpoint

# object files

%.o:		%.c ibmtss/tss.h 
		$(CC) $(CCFLAGS) $< -o $@

